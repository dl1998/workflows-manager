name: Perform Checks
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REPOSITORY_NAME: 'workflows-manager'
  THRESHOLD: 0.9
permissions: write-all

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          python3 -m pip install hatch
          hatch env create
      - name: Run Pylint
        uses: dciborow/action-pylint@0.1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          level: warning
          glob_pattern: "src/**/*.py"

  unit-tests:
    name: Run Unit Tests with Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Hatch and Dependencies
        run: |
          python3 -m pip install hatch
          hatch env create test
      - name: Run Unit Tests with Coverage
        run: |
          mkdir -p reports
          hatch env run -e test -i py=${{ matrix.python-version }} -- \
          coverage run --source="src" --data-file="$(pwd)/reports/.coverage.unit.${{ matrix.python-version }}" -m \
          pytest tests/workflows_manager/unit_tests \
            --junitxml=$(pwd)/reports/junit.unit.${{ matrix.python-version }}.xml
      - name: Upload Unit Test Reports
        uses: actions/upload-artifact@v3
        with:
          include-hidden-files: true
          name: unit-test-reports
          path: reports

  acceptance-tests:
    name: Run Acceptance Tests with Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12", "3.13" ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Hatch and Dependencies
        run: |
          python3 -m pip install hatch
          hatch env create test
      - name: Run Acceptance Tests with Coverage
        run: |
          mkdir -p temp_reports
          mkdir -p reports
          hatch env run -e test -i py=${{ matrix.python-version }} -- \
          coverage run --source="src" --data-file="$(pwd)/reports/.coverage.acceptance.${{ matrix.python-version }}" -m \
          behave tests/workflows_manager/acceptance_tests/features \
            --junit --junit-directory=$(pwd)/temp_reports
          hatch env run -e test -i py=${{ matrix.python-version }} -- junitparser merge $(pwd)/temp_reports/*.xml $(pwd)/reports/junit.acceptance.${{ matrix.python-version }}.xml
      - name: Upload Acceptance Test Reports
        uses: actions/upload-artifact@v3
        with:
          include-hidden-files: true
          name: acceptance-test-reports
          path: reports

  combine-reports:
    name: Combine JUnit and Coverage Reports
    runs-on: ubuntu-latest
    needs: [ unit-tests, acceptance-tests ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Install Hatch and Dependencies
        run: |
          python3 -m pip install hatch
      - name: Download Unit Test Reports
        uses: actions/download-artifact@v3
        with:
          name: unit-test-reports
          path: ./reports/unit
      - name: Download Acceptance Test Reports
        uses: actions/download-artifact@v3
        with:
          name: acceptance-test-reports
          path: ./reports/acceptance
      - name: Combine JUnit Reports
        run: |
          hatch run +py=3.13 test:junitparser merge ./reports/acceptance/junit.acceptance.*.xml ./reports/unit/junit.unit.*.xml ./reports/combined-junit.xml
      - name: Combine Coverage Reports
        run: |
          hatch run +py=3.13 test:coverage combine ./reports/unit/.coverage.* ./reports/acceptance/.coverage.*
          hatch run +py=3.13 test:coverage xml -o ./reports/combined-coverage.xml
      - name: Upload Combined Reports
        uses: actions/upload-artifact@v3
        with:
          include-hidden-files: true
          name: combined-reports
          path: |
            ./reports/combined-coverage.xml
            ./reports/combined-junit.xml
            ./.coverage

  check-pr-coverage:
    name: Check Pull Request Coverage
    runs-on: ubuntu-latest
    needs: combine-reports
    if: github.event_name == 'pull_request'
    steps:
      - name: Download Combined Coverage
        uses: actions/download-artifact@v3
        with:
          name: combined-reports
          path: .
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Check Coverage Threshold
        uses: orgoro/coverage@v3.1
        with:
          coverageFile: ./reports/combined-coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          thresholdAll: ${{ env.THRESHOLD }}

  upload-codecov:
    name: Upload to Codecov
    runs-on: ubuntu-latest
    needs: combine-reports
    steps:
      - name: Download Combined Reports
        uses: actions/download-artifact@v3
        with:
          name: combined-reports
          path: ./reports
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./reports/combined-coverage.xml
      - name: Upload Test Results to Codecov
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./reports/combined-junit.xml

  add-badges:
    name: Add Badges
    runs-on: ubuntu-latest
    needs: upload-codecov
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download Combined Coverage
        uses: actions/download-artifact@v3
        with:
          name: combined-reports
          path: .
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Hatch and Dependencies
        run: |
          python3 -m pip install hatch
          python3 -m pip install coverage
      - name: Retrieve Version
        run: echo "VERSION=$(hatch version)" >> "$GITHUB_ENV"
      - name: Retrieve Total Coverage
        id: coverage
        if: '!cancelled()'
        run: echo "TOTAL_COVERAGE=$(coverage report | grep TOTAL | awk '{ print $4 }' | sed 's/%//g')" >> "$GITHUB_ENV"
      - name: Determine Coverage Color
        id: coverage-color
        run: |
          if (( $(echo "${{ env.TOTAL_COVERAGE }} < ${{ env.THRESHOLD }} * 100" | bc -l) )); then
            echo "color=red" >> $GITHUB_ENV
          else
            echo "color=green" >> $GITHUB_ENV
          fi
      - name: Add Badges
        uses: wow-actions/add-badges@v1.1.0
        env:
          repo_url: ${{ github.event.repository.html_url }}
          repo_name: ${{ github.event.repository.name }}
          repo_owner: ${{ github.event.repository.owner.login }}
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          badges: |
            [
              {
                "badge": "https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge",
                "alt": "MIT License",
                "link": "${{ env.repo_url }}/blob/main/LICENSE.md"
              },
              {
                "badge": "https://img.shields.io/badge/Language-Python-blue?style=for-the-badge&logo=python",
                "alt": "Language",
                "link": "https://www.python.org/"
              },
              {
                "badge": "https://img.shields.io/badge/PRs-Welcome-brightgreen.svg?style=for-the-badge",
                "alt": "PRs Welcome",
                "link": "${{ env.repo_url }}/pulls"
              },
              {
                "badge": "https://img.shields.io/badge/TestPyPi-${{ env.VERSION }}-brightgreen.svg?style=for-the-badge",
                "alt": "TestPyPi ${{ env.VERSION }}",
                "link": "https://test.pypi.org/project/${{ env.REPOSITORY_NAME }}/"
              },
              {
                "badge": "https://img.shields.io/badge/PyPi-${{ env.VERSION }}-brightgreen.svg?style=for-the-badge",
                "alt": "PyPi ${{ env.VERSION }}",
                "link": "https://pypi.org/project/${{ env.REPOSITORY_NAME }}/"
              },
              {
                "badge": "https://img.shields.io/badge/Coverage-${{ env.TOTAL_COVERAGE }}%25-${{ env.color }}.svg?style=for-the-badge",
                "alt": "Coverage ${{ env.TOTAL_COVERAGE }}%",
                "link": "https://codecov.io/gh/${{ github.repository }}"
              },
              {
                "badge": "https://img.shields.io/badge/Docker-dl1998%2Fworkflows-manager?style=for-the-badge&color=blue",
                "alt": "${{ github.repository }}",
                "link": "https://hub.docker.com/repository/docker/${{ github.repository }}"
              }
            ]
          path: README.md
          center: false
