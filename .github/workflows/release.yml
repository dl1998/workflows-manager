name: Release New Version
on:
  workflow_dispatch:
    inputs:
      force_update:
        type: boolean
        description: "Force update even if version exists"
        default: false
  release:
    types: [published]
env:
  REPOSITORY_NAME: workflows-manager
jobs:
  create-release:
    name: Create a new release
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install Hatch
        run: python3 -m pip install hatch
      - name: Setup environment
        run: hatch build
      - name: Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-dist
          path: dist/

  check-version-pypi:
    name: Check if version exists on PyPI
    runs-on: ubuntu-latest
    outputs:
      version_exists: ${{ steps.check_pypi.outputs.version_exists }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install Hatch
        run: python3 -m pip install hatch
      - name: Get Version from Hatch
        id: get_version
        run: |
          VERSION=$(hatch version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Check PyPI for existing version
        id: check_pypi
        run: |
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://pypi.org/pypi/${{ env.REPOSITORY_NAME }}/${{ env.VERSION }}/json)
          echo "version_exists=$([ "$HTTP_CODE" == "200" ] && echo true || echo false)" >> $GITHUB_OUTPUT

  publish-library-dev:
    name: Publish new release on dev
    needs: ['create-release', 'check-version-pypi']
    if: needs.check-version-pypi.outputs.version_exists != 'true' || github.event.inputs.force_update == 'true'
    permissions: write-all
    runs-on: ubuntu-latest
    environment:
      name: dev
      url: "https://test.pypi.org/project/${{ env.REPOSITORY_NAME }}/"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-dist
          path: dist/
      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: "https://test.pypi.org/legacy/"

  publish-library-prod:
    name: Publish new release on prod
    needs: ['create-release', 'publish-library-dev']
    if: needs.check-version-pypi.outputs.version_exists != 'true' || github.event.inputs.force_update == 'true'
    permissions: write-all
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: "https://pypi.org/project/${{ env.REPOSITORY_NAME }}/"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-dist
          path: dist/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  check-version-docker:
    name: Check if version exists on Docker Hub
    runs-on: ubuntu-latest
    outputs:
      version_exists: ${{ steps.check_docker.outputs.version_exists }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install Hatch
        run: python3 -m pip install hatch
      - name: Get Version from Hatch
        id: get_version
        run: |
          VERSION=$(hatch version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Check Docker Hub for existing version
        id: check_docker
        run: |
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://hub.docker.com/v2/repositories/${{ github.repository }}/tags/${{ env.VERSION }})
          echo "version_exists=$([ "$HTTP_CODE" == "200" ] && echo true || echo false)" >> $GITHUB_OUTPUT
        continue-on-error: true

  build-and-push-docker:
    name: Build and Push Docker Image
    needs: ['create-release', 'check-version-docker']
    if: needs.check-version-docker.outputs.version_exists != 'true' || github.event.inputs.force_update == 'true'
    runs-on: ubuntu-latest
    permissions: write-all
    environment:
      name: docker
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install Hatch
        run: python3 -m pip install hatch
      - name: Get Version from Hatch
        id: get_version
        run: |
          VERSION=$(hatch version)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Get creation date
        id: get_version
        run: |
          echo "CREATION_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{ github.repository }}:${{ env.VERSION }}
            ${{ github.repository }}:latest
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ env.VERSION }}
            REVISION=${{ github.sha }}
            CREATION_DATE=${{ env.CREATION_DATE }}