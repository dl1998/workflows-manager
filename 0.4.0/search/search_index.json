{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":"<p>Workflows manager is a tool that allows you to manage your workflows in a more efficient way. It provides a simple and intuitive way to create a new workflow from the defined steps. You can create a new workflow by reusing the existing steps or workflows.</p>"},{"location":"#using-pypi-recommended","title":"Using PyPi (recommended)","text":"<p>Workflows manager is available as PyPi package. You can install it using pip, it is recommended to use pip together with virtual environment (venv).</p> latestspecific version <pre><code>python3 -m pip install workflows-manager\n</code></pre> <pre><code>python3 -m pip install workflows-manager==0.4.0\n</code></pre>"},{"location":"#using-source-code","title":"Using source code","text":"<p>You can also install workflows manager from the source code. You can clone the repository and install it using pip. You may need to install Hatch prior to installing the workflows-manager this way.</p> <pre><code>git clone\ncd workflows-manager\npython3 -m pip install .\n</code></pre>"},{"location":"#using-wheel","title":"Using wheel","text":"<p>You can also install workflows manager from the wheel file.</p> <pre><code>python3 -m pip install workflows_manager-0.4.0-py3-none-any.whl\n</code></pre>"},{"location":"developers/architecture/","title":"Architecture","text":""},{"location":"developers/architecture/#class-diagram","title":"Class Diagram","text":""},{"location":"developers/workflows_syntax/","title":"Workflows Syntax","text":"<p>Workflows Manager implements both <code>*.yaml</code> and <code>*.json</code> file formats for defining workflows. The following sections describe the structure of each file format.</p>"},{"location":"developers/workflows_syntax/#parameters","title":"<code>parameters</code>","text":"Required Type Default Description No array Parameters section allows to define top-level parameters that will be propagated to all workflows. See also workflow-level parameters and step-level for more details. <p>Example</p> YAMLJSON <pre><code>parameters:\n  - name: parameter_name\n    value: parameter_value\n    from_context: context_variable\n</code></pre> <pre><code>{\n  \"parameters\": [\n    {\n      \"name\": \"parameter_name\",\n      \"value\": \"parameter_value\",\n      \"from_context\": \"context_variable\"\n    }\n  ]\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#parametersname","title":"<code>parameters[*].name</code>","text":"Required Type Default Description Yes string Name of the parameter. <p>Example</p> YAMLJSON <pre><code>parameters:\n  - name: parameter_name\n    value: parameter_value\n    from_context: context_variable\n</code></pre> <pre><code>{\n  \"parameters\": [\n    {\n      \"name\": \"parameter_name\",\n      \"value\": \"parameter_value\",\n      \"from_context\": \"context_variable\"\n    }\n  ]\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#parametersvalue","title":"<code>parameters[*].value</code>","text":"Required Type Default Description No string | integer | number | boolean | array | object Value of the parameter. Can be omitted, if <code>from_context</code> has been provided. This attribute supports templating, you could inject value from another parameter using <code>{variable_name}</code> syntax. <p>Example</p> YAMLJSON <pre><code>parameters:\n  - name: string_parameter\n    value: Example value.\n  - name: integer_parameter\n    value: 123\n  - name: float_parameter\n    value: 123.456\n  - name: boolean_parameter\n    value: true\n  - name: list_parameter\n    value:\n      - item1\n      - item2\n  - name: dictionary_parameter\n    value:\n      key1: value1\n      key2: value2\n</code></pre> <pre><code>{\n  \"parameters\": [\n    {\n      \"name\": \"string_parameter\",\n      \"value\": \"Example value.\"\n    },\n    {\n      \"name\": \"integer_parameter\",\n      \"value\": 123\n    },\n    {\n      \"name\": \"float_parameter\",\n      \"value\": 123.456\n    },\n    {\n      \"name\": \"boolean_parameter\",\n      \"value\": true\n    },\n    {\n      \"name\": \"list_parameter\",\n      \"value\": [\"item1\", \"item2\"]\n    },\n    {\n      \"name\": \"dictionary_parameter\",\n      \"value\": {\n        \"key1\": \"value1\",\n        \"key2\": \"value2\"\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#parametersfrom_context","title":"<code>parameters[*].from_context</code>","text":"Required Type Default Description No string Name of the context variable to get the value from. Can be omitted, if <code>value</code> has been provided. If both <code>value</code> and <code>from_context</code> are provided, then <code>value</code> works as default value when <code>from_context</code> variable has not been found. <p>Example</p> YAMLJSON <pre><code>parameters:\n  - name: parameter_name\n    value: parameter_value\n    from_context: context_variable\n</code></pre> <pre><code>{\n  \"parameters\": [\n    {\n      \"name\": \"parameter_name\",\n      \"value\": \"parameter_value\",\n      \"from_context\": \"context_variable\"\n    }\n  ]\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflows","title":"<code>workflows</code>","text":"Required Type Default Description Yes object Workflows section allows to define multiple workflows, each containing a list of steps. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        step: registered_step_name\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflow","title":"<code>workflows.&lt;workflow&gt;</code>","text":"Required Type Default Description Yes object Workflow object that contains workflow's steps and optional parameters. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    parameters:\n      - name: parameter_name\n        value: parameter_value\n    steps:\n      - name: step_name\n        step: registered_step_name\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"parameters\": [\n        {\n          \"name\": \"parameter_name\",\n          \"value\": \"parameter_value\"\n        }\n      ],\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowparameters","title":"<code>workflows.&lt;workflow&gt;.parameters</code>","text":"Required Type Default Description No array Parameters section allows to define workflow-specific parameters that will override top-level parameters. See also top-level parameters and step-level parameters for more details. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    parameters:\n      - name: parameter_name\n        value: parameter_value\n        from_context: context_variable\n    steps:\n      - name: step_name\n        step: registered_step_name\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"parameters\": [\n        {\n          \"name\": \"parameter_name\",\n          \"value\": \"parameter_value\",\n          \"from_context\": \"context_variable\"\n        }\n      ],\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowsteps","title":"<code>workflows.&lt;workflow&gt;.steps</code>","text":"Required Type Default Description Yes array List of steps that will be executed in the order they are defined. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        step: registered_step_name\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowstepsname","title":"<code>workflows.&lt;workflow&gt;.steps[*].name</code>","text":"Required Type Default Description Yes string Name of the step. It must be unique within the workflow scope. This attribute supports templating, you could inject value from another parameter using <code>{variable_name}</code> syntax. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        step: registered_step_name\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowstepsstep","title":"<code>workflows.&lt;workflow&gt;.steps[*].step</code>","text":"Required Type Default Description Yes string Name of the step registered in the code that will be executed. It is required for <code>normal</code> type. This attribute supports templating, you could inject value from another parameter using <code>{variable_name}</code> syntax. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        step: registered_step_name\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowstepstype","title":"<code>workflows.&lt;workflow&gt;.steps[*].type</code>","text":"Required Type Default Description No string normal Type of the step. It can be either <code>normal</code>, <code>workflow</code>, or <code>parallel</code>.<ul><li><code>normal</code> - requires <code>step</code> field to be provided</li><li><code>workflow</code> - requires <code>workflow</code> field to be provided</li><li><code>parallel</code> - requires <code>parallels</code> field to be provided</li></ul> <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        step: registered_step_name\n        type: normal\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\",\n          \"type\": \"normal\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowstepsworkflow","title":"<code>workflows.&lt;workflow&gt;.steps[*].workflow</code>","text":"Required Type Default Description No string Name of the workflow, it shall exist in the workflows file. It is required for <code>workflow</code> type. This attribute supports templating, you could inject value from another parameter using <code>{variable_name}</code> syntax. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        workflow: defined_workflow_name\n        type: workflow\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"workflow: \"defined_workflow_name\",\n          \"type\": \"workflow\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowstepsparallels","title":"<code>workflows.&lt;workflow&gt;.steps[*].parallels</code>","text":"Required Type Default Description No array List of steps that will be executed in parallel. It is required for <code>parallel</code> type. Refer to <code>workflows.&lt;workflow&gt;.steps[*]</code> to see full list of supported parameters for the <code>parallel</code> step. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        parallels:\n          - name: parallel_step1\n            step: registered_parallel_step1\n          - name: parallel_step2\n            step: registered_parallel_step2\n        type: parallel\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"parallels\": [\n            {\n              \"name\": \"parallel_step1\",\n              \"step\": \"registered_parallel_step1\"\n            },\n            {\n              \"name\": \"parallel_step2\",\n              \"step\": \"registered_parallel_step2\"\n            }\n          ],\n          \"type\": \"parallel\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowstepscapture_stdout","title":"<code>workflows.&lt;workflow&gt;.steps[*].capture_stdout</code>","text":"Required Type Default Description No string false The flag used to specify whether to capture standard output stream into step information. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        step: registered_step_name\n        capture_stdout: true\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\",\n          \"capture_stdout\": true\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowstepscapture_stderr","title":"<code>workflows.&lt;workflow&gt;.steps[*].capture_stderr</code>","text":"Required Type Default Description No string false The flag used to specify whether to capture standard error stream into step information. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        step: registered_step_name\n        capture_stderr: true\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\",\n          \"capture_stderr\": true\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowstepsparameters","title":"<code>workflows.&lt;workflow&gt;.steps[*].parameters</code>","text":"Required Type Default Description No array Parameters section allows to define step-specific parameters that will override workflow-level and top-level parameters. See also workflow-level parameters and top-level parameters for more details. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        step: registered_step_name\n        parameters:\n          - name: parameter_name\n            value: parameter_value\n            from_context: context_variable\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\",\n          \"parameters\": [\n            {\n              \"name\": \"parameter_name\",\n              \"value\": \"parameter_value\",\n              \"from_context\": \"context_variable\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/workflows_syntax/#workflowsworkflowstepsstop_on_error","title":"<code>workflows.&lt;workflow&gt;.steps[*].stop_on_error</code>","text":"Required Type Default Description No string false The flag used to specify whether to stop the workflow execution if the step fails. <p>Example</p> YAMLJSON <pre><code>workflows:\n  workflow_name:\n    steps:\n      - name: step_name\n        step: registered_step_name\n        stop_on_error: true\n</code></pre> <pre><code>{\n  \"workflows\": {\n    \"workflow_name\": {\n      \"steps\": [\n        {\n          \"name\": \"step_name\",\n          \"step\": \"registered_step_name\",\n          \"stop_on_error\": true\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"developers/modules/configuration/","title":"Module: configuration","text":"<p>This module contains the implementation of the base components which are parsed from the workflows configuration file.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Configuration","title":"<code>Configuration</code>  <code>dataclass</code>","text":"<p>Class that represents the configuration of the workflows.</p> <p>Parameters:</p> Name Type Description Default <code>workflows</code> <code>Workflows</code> <p>List of workflows.</p> required <code>parameters</code> <code>Parameters</code> <p>List of configuration level parameters.</p> <code>Parameters()</code>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Configuration.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>A method that creates a new instance of the class from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary with configuration data.</p> required <p>Returns:</p> Type Description <code>Configuration</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Configuration.from_json","title":"<code>from_json(file_path)</code>  <code>classmethod</code>","text":"<p>A method that creates a new instance of the class from the JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, Path]</code> <p>Path to the JSON file.</p> required <p>Returns:</p> Type Description <code>Configuration</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Configuration.from_yaml","title":"<code>from_yaml(file_path)</code>  <code>classmethod</code>","text":"<p>A method that creates a new instance of the class from the YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>Union[str, Path]</code> <p>Path to the YAML file.</p> required <p>Returns:</p> Type Description <code>Configuration</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Configuration.validate_all","title":"<code>validate_all()</code>","text":"<p>A method that validates the configuration. It validates all workflows and parameters.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.NormalStep","title":"<code>NormalStep</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Step</code></p> <p>Class that represents a normal step in the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the step.</p> required <code>parameters</code> <code>Parameters</code> <p>List of step parameters.</p> <code>Parameters()</code> <code>stop_on_error</code> <code>bool</code> <p>Flag that indicates whether the workflow should stop on error.</p> <code>True</code> <code>id</code> <code>Optional[str]</code> <p>ID of the step (name of the step used when registering the step).</p> <code>None</code> <code>capture_stdout</code> <code>bool</code> <p>Flag that indicates whether the stdout should be captured.</p> <code>False</code> <code>capture_stderr</code> <code>bool</code> <p>Flag that indicates whether the stderr should be captured.</p> <code>False</code>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.NormalStep.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the class from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary with step data.</p> required <p>Returns:</p> Type Description <code>Step</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.NormalStep.validate_all","title":"<code>validate_all()</code>","text":"<p>Validate the step. Check if the type is valid and if the step has all required attributes.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.ParallelStep","title":"<code>ParallelStep</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Step</code></p> <p>Class that represents a parallel step in the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the step.</p> required <code>parameters</code> <code>Parameters</code> <p>List of step parameters.</p> <code>Parameters()</code> <code>stop_on_error</code> <code>bool</code> <p>Flag that indicates whether the workflow should stop on error.</p> <code>True</code> <code>parallels</code> <code>Steps</code> <p>List of parallel steps.</p> <code>Steps()</code>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.ParallelStep.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the class from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary with step data.</p> required <p>Returns:</p> Type Description <code>Step</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.ParallelStep.validate_all","title":"<code>validate_all()</code>","text":"<p>Validate the step. Check if the type is valid and if the step has all required attributes.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Parameter","title":"<code>Parameter</code>  <code>dataclass</code>","text":"<p>Class that represents a parameter.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the parameter.</p> required <code>value</code> <code>Optional[Any]</code> <p>Value of the parameter.</p> <code>None</code> <code>from_context</code> <code>Optional[str]</code> <p>Name of the context from which the parameter should be taken.</p> <code>None</code>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Parameter.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the class from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary with parameter data.</p> required <p>Returns:</p> Type Description <code>Parameter</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Parameter.validate_all","title":"<code>validate_all()</code>","text":"<p>Validate the parameter. Check if the name is not empty, if it is not reserved, and if it matches the regex.</p> <p>Raises:</p> Type Description <code>InvalidConfigurationException</code> <p>If the parameter is not valid.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Parameters","title":"<code>Parameters</code>  <code>dataclass</code>","text":"<p>Class that represents a list of parameters.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code>List[Parameter]</code> <p>List of parameters.</p> <code>list()</code>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Parameters.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the class from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict]</code> <p>Dictionary with parameters data.</p> required <p>Returns:</p> Type Description <code>Parameters</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Parameters.validate_all","title":"<code>validate_all()</code>","text":"<p>Validate all parameters in the list.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Step","title":"<code>Step</code>  <code>dataclass</code>","text":"<p>Class that represents a step in the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the step.</p> required <code>parameters</code> <code>Parameters</code> <p>List of step parameters.</p> <code>Parameters()</code> <code>stop_on_error</code> <code>bool</code> <p>Flag that indicates whether the workflow should stop on error.</p> <code>True</code>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Step.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the class from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary with step data.</p> required <p>Returns:</p> Type Description <code>Step</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Step.validate_all","title":"<code>validate_all()</code>","text":"<p>Validate the step. Check if the type is valid and if the step has all required attributes.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.StepType","title":"<code>StepType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum class that represents the type of the step.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.StepType.from_str","title":"<code>from_str(value)</code>  <code>staticmethod</code>","text":"<p>Convert string to StepType enum.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>String representation of the step type.</p> required <p>Returns:</p> Type Description <code>StepType</code> <p>StepType enum.</p> <p>Raises:</p> Type Description <code>InvalidConfigurationException</code> <p>If the step type is not valid enum value.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Steps","title":"<code>Steps</code>  <code>dataclass</code>","text":"<p>Class that represents a list of steps.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code>List[Union[NormalStep, WorkflowStep, ParallelStep]]</code> <p>List of steps.</p> <code>list()</code>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Steps.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the class from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>List[Dict]</code> <p>Dictionary with steps data.</p> required <p>Returns:</p> Type Description <code>Steps</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Steps.validate_all","title":"<code>validate_all()</code>","text":"<p>Validate all steps in the list.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Workflow","title":"<code>Workflow</code>  <code>dataclass</code>","text":"<p>Class that represents a workflow.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the workflow.</p> required <code>steps</code> <code>Steps</code> <p>List of steps in the workflow.</p> required <code>parameters</code> <code>Parameters</code> <p>List of workflow parameters.</p> <code>Parameters()</code>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Workflow.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the class from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary with workflow data.</p> required <p>Returns:</p> Type Description <code>Workflow</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Workflow.validate_all","title":"<code>validate_all()</code>","text":"<p>Validate the workflow. Check if the name is valid and if all steps and parameters are valid.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.WorkflowStep","title":"<code>WorkflowStep</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Step</code></p> <p>Class that represents a workflow step in the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the step.</p> required <code>parameters</code> <code>Parameters</code> <p>List of step parameters.</p> <code>Parameters()</code> <code>stop_on_error</code> <code>bool</code> <p>Flag that indicates whether the workflow should stop on error.</p> <code>True</code> <code>workflow</code> <code>Optional[str]</code> <p>Name of the workflow that should be executed.</p> <code>None</code>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.WorkflowStep.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the class from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary with step data.</p> required <p>Returns:</p> Type Description <code>Step</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.WorkflowStep.validate_all","title":"<code>validate_all()</code>","text":"<p>Validate the step. Check if the type is valid and if the step has all required attributes.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Workflows","title":"<code>Workflows</code>  <code>dataclass</code>","text":"<p>Class that represents a list of workflows.</p> <p>Parameters:</p> Name Type Description Default <code>elements</code> <code>List[Workflow]</code> <p>List of workflows.</p> required"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Workflows.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create a new instance of the class from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary with workflows data.</p> required <p>Returns:</p> Type Description <code>Workflows</code> <p>New instance of the class.</p>"},{"location":"developers/modules/configuration/#workflows_manager.configuration.Workflows.validate_all","title":"<code>validate_all()</code>","text":"<p>Validate all workflows in the list.</p>"},{"location":"developers/modules/dispatcher/","title":"Module: dispatcher","text":"<p>This module contains the classes and functions to dispatch and run workflows.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.ConfigurationFormat","title":"<code>ConfigurationFormat</code>","text":"<p>               Bases: <code>Enum</code></p> <p>A class to represent the configuration file formats.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.DispatcherAction","title":"<code>DispatcherAction</code>","text":"<p>               Bases: <code>Enum</code></p> <p>A class to represent the actions that can be performed by the dispatcher.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.DispatcherAction.from_str","title":"<code>from_str(action)</code>  <code>staticmethod</code>","text":"<p>A method to get the dispatcher action from the provided string.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>The action to perform.</p> required <p>Returns:</p> Type Description <code>DispatcherAction</code> <p>The dispatcher action.</p> <p>Raises:</p> Type Description <code>UnknownOption</code> <p>If the action is unknown.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcher","title":"<code>WorkflowDispatcher</code>","text":"<p>A class to dispatch and run workflows.</p> <p>Attributes:</p> Name Type Description <code>logger</code> <code>Logger</code> <p>Workflow engine logger.</p> <code>imports</code> <code>List[Path]</code> <p>The paths to the packages with modules.</p> <code>configuration</code> <code>Configuration</code> <p>The configuration of the workflows.</p> <code>workflow_name</code> <code>str</code> <p>The name of the workflow to run.</p> <code>status_file</code> <code>Optional[Path]</code> <p>The path to the file where the statuses of the particular steps will be stored.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcher.dispatch","title":"<code>dispatch(action)</code>","text":"<p>A method to dispatch the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>DispatcherAction</code> <p>The action to perform.</p> required"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcher.list","title":"<code>list()</code>","text":"<p>A method to list the workflows.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcher.run","title":"<code>run()</code>","text":"<p>A method to run the workflow.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcher.validate","title":"<code>validate()</code>","text":"<p>A method to validate the configuration provided to the dispatcher.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcherBuilder","title":"<code>WorkflowDispatcherBuilder</code>","text":"<p>A class to build the workflow dispatcher.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcherBuilder.build","title":"<code>build()</code>","text":"<p>A method to build the workflow dispatcher.</p> <p>Returns:</p> Type Description <code>WorkflowDispatcher</code> <p>WorkflowDispatcher instance.</p> <p>Raises:</p> Type Description <code>InvalidConfiguration</code> <p>If the workflow does not exist in the configuration.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcherBuilder.configuration_file","title":"<code>configuration_file(configuration_file=None)</code>","text":"<p>A method to set the configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>configuration_file</code> <code>Optional[Union[str, Path]]</code> <p>The path to the configuration file.</p> <code>None</code> <p>Returns:</p> Type Description <code>WorkflowDispatcherBuilder</code> <p>WorkflowDispatcherBuilder instance.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcherBuilder.disable_current_path_import","title":"<code>disable_current_path_import(disable)</code>","text":"<p>A method to disable the automatic import of the modules from the current path.</p> <p>Parameters:</p> Name Type Description Default <code>disable</code> <code>bool</code> <p>True if the current path import should be disabled, otherwise False.</p> required <p>Returns:</p> Type Description <code>WorkflowDispatcherBuilder</code> <p>WorkflowDispatcherBuilder instance.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcherBuilder.imports","title":"<code>imports(imports)</code>","text":"<p>A method to set the imports.</p> <p>Parameters:</p> Name Type Description Default <code>imports</code> <code>Optional[List[str]]</code> <p>The paths to the packages with modules.</p> required <p>Returns:</p> Type Description <code>WorkflowDispatcherBuilder</code> <p>WorkflowDispatcherBuilder instance.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcherBuilder.logger","title":"<code>logger(logger)</code>","text":"<p>A method to set the logger.</p> <p>Parameters:</p> Name Type Description Default <code>logger</code> <code>Logger</code> <p>Workflow engine logger.</p> required <p>Returns:</p> Type Description <code>WorkflowDispatcherBuilder</code> <p>WorkflowDispatcherBuilder instance.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcherBuilder.parameters","title":"<code>parameters(parameters)</code>","text":"<p>A method to set the parameters.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>Dict[str, Any]</code> <p>The parameters to set.</p> required <p>Returns:</p> Type Description <code>WorkflowDispatcherBuilder</code> <p>WorkflowDispatcherBuilder instance.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcherBuilder.status_file","title":"<code>status_file(status_file)</code>","text":"<p>A method to set the status file.</p> <p>Parameters:</p> Name Type Description Default <code>status_file</code> <code>Optional[Union[str, Path]]</code> <p>The path to the file where the statuses of the particular steps will be stored.</p> required <p>Returns:</p> Type Description <code>WorkflowDispatcherBuilder</code> <p>WorkflowDispatcherBuilder instance.</p>"},{"location":"developers/modules/dispatcher/#workflows_manager.dispatcher.WorkflowDispatcherBuilder.workflow_name","title":"<code>workflow_name(workflow_name)</code>","text":"<p>A method to set the workflow name.</p> <p>Parameters:</p> Name Type Description Default <code>workflow_name</code> <code>str</code> <p>The name of the workflow to run.</p> required <p>Returns:</p> Type Description <code>WorkflowDispatcherBuilder</code> <p>WorkflowDispatcherBuilder instance.</p>"},{"location":"developers/modules/exceptions/","title":"Module: exceptions","text":"<p>This module contains custom exceptions.</p>"},{"location":"developers/modules/exceptions/#workflows_manager.exceptions.InvalidConfiguration","title":"<code>InvalidConfiguration</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when configuration is invalid.</p>"},{"location":"developers/modules/exceptions/#workflows_manager.exceptions.InvalidParameter","title":"<code>InvalidParameter</code>","text":"<p>               Bases: <code>InvalidConfiguration</code></p> <p>Exception raised when parameter is invalid.</p>"},{"location":"developers/modules/exceptions/#workflows_manager.exceptions.MissingParameter","title":"<code>MissingParameter</code>","text":"<p>               Bases: <code>InvalidConfiguration</code></p> <p>Exception raised when parameter is missing.</p>"},{"location":"developers/modules/exceptions/#workflows_manager.exceptions.MissingStep","title":"<code>MissingStep</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when step from configuration is not registered.</p>"},{"location":"developers/modules/exceptions/#workflows_manager.exceptions.UnknownOption","title":"<code>UnknownOption</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when unknown option is passed.</p>"},{"location":"developers/modules/logger/","title":"Module: logger","text":"<p>This module provides a logger for the workflow-engine application.</p>"},{"location":"developers/modules/logger/#workflows_manager.logger.JSONLogFormatter","title":"<code>JSONLogFormatter</code>","text":"<p>               Bases: <code>Formatter</code></p> <p>A class to format the log records in JSON format.</p> <p>Attributes:</p> Name Type Description <code>log_level</code> <code>str</code> <p>Logging level of the log record.</p>"},{"location":"developers/modules/logger/#workflows_manager.logger.JSONLogFormatter.format","title":"<code>format(record)</code>","text":"<p>Format the log record in JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>Log record to be formatted.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Log record in JSON format.</p>"},{"location":"developers/modules/logger/#workflows_manager.logger.get_logger","title":"<code>get_logger(log_level, log_file_path=None, console_format='text', file_format='text')</code>","text":"<p>Get the logger for the application.</p> <p>Parameters:</p> Name Type Description Default <code>log_level</code> <code>str</code> <p>Logging level of the application.</p> required <code>log_file_path</code> <code>Optional[str]</code> <p>Path to the file where the logs will be stored.</p> <code>None</code> <code>console_format</code> <code>str</code> <p>Format of the logs in the console.</p> <code>'text'</code> <code>file_format</code> <code>str</code> <p>Format of the logs in the file.</p> <code>'text'</code> <p>Returns:</p> Type Description <code>logging.Logger</code> <p>Logger for the application.</p>"},{"location":"developers/modules/main/","title":"Module: main","text":"<p>This module is the entry point of the workflow engine. It contains the main function that is responsible for running the workflows.</p>"},{"location":"developers/modules/main/#workflows_manager.main.main","title":"<code>main(arguments)</code>","text":"<p>Main function of the application (entrypoint).</p> <p>Parameters:</p> Name Type Description Default <code>arguments</code> <code>Namespace</code> <p>Arguments passed to the application.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Exit status code of the application.</p>"},{"location":"developers/modules/main/#workflows_manager.main.main_cli","title":"<code>main_cli()</code>","text":"<p>Main function of the application (entrypoint) for the command line interface.</p>"},{"location":"developers/modules/workflow/","title":"Module: workflow","text":"<p>This module contains the implementation of the base components which are Workflow and Step classes.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.Step","title":"<code>Step</code>","text":"<p>A class to represent a step instance that performs a specific task in a workflow.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the step (it's ID).</p> <code>''</code> <p>Attributes:</p> Name Type Description <code>logger</code> <code>Logger</code> <p>The logger of the step.</p> <code>workflow_context</code> <code>WorkflowContext</code> <p>The context of the workflow.</p> <code>path</code> <code>StepPath</code> <p>The path to the step.</p> <code>name</code> <code>str</code> <p>The name of the step (it's ID).</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.Step.default_logger_name","title":"<code>default_logger_name: str</code>  <code>property</code>","text":"<p>A property to get the default name of the logger that is composed of the default logger prefix and the name of the step.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.Step.information","title":"<code>information: StepInformation</code>  <code>property</code>","text":"<p>A property to get the information about the step.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.Step.configure_logger","title":"<code>configure_logger()</code>","text":"<p>A method to configure the logger of the step.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.Step.fail","title":"<code>fail()</code>","text":"<p>A method to set the status of the step to 'failed'.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.Step.perform","title":"<code>perform(*args, **kwargs)</code>","text":"<p>A method to perform the task of the step.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <p>The positional arguments of the step.</p> <code>()</code> <code>kwargs</code> <p>The keyword arguments of the step.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Any</code> <p>The return value of the step.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>The method 'perform' must be implemented in the child class.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.Step.success","title":"<code>success()</code>","text":"<p>A method to set the status of the step to 'success'.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.StepInformation","title":"<code>StepInformation</code>  <code>dataclass</code>","text":"<p>A class to represent the information of a step in a workflow.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>StepPath</code> <p>The path to the step.</p> required <code>status</code> <code>StepStatus</code> <p>The status of the step.</p> required <code>parameters</code> <code>Optional[Dict]</code> <p>The parameters of the step.</p> <code>None</code> <code>stdout</code> <code>Optional[str]</code> <p>The standard output of the step.</p> <code>None</code> <code>stderr</code> <code>Optional[str]</code> <p>The standard error of the step.</p> <code>None</code> <code>error</code> <code>Optional[Exception]</code> <p>The error (exception) of the step.</p> <code>None</code> <code>return_value</code> <code>Optional[Any]</code> <p>The return value of the step.</p> <code>None</code> <code>previous_step</code> <code>Optional[StepInformation]</code> <p>The previous step in the workflow.</p> <code>None</code> <code>next_step</code> <code>Optional[StepInformation]</code> <p>The next step in the workflow.</p> <code>None</code> <code>parent</code> <code>Optional[StepInformation]</code> <p>The parent step in the workflow.</p> <code>None</code> <code>children</code> <code>Optional[List[StepInformation]]</code> <p>The children steps in the workflow.</p> <code>None</code>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.StepInformation.to_dict","title":"<code>to_dict()</code>","text":"<p>A method to convert the step information to a dictionary.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>The step information as a dictionary.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.StepPath","title":"<code>StepPath</code>","text":"<p>A class to represent the path to a step in a workflow.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.StepPath.name","title":"<code>name: str</code>  <code>property</code> <code>writable</code>","text":"<p>A property to get the name of the step.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.StepPath.type","title":"<code>type: StepType</code>  <code>property</code>","text":"<p>A property to get the type of the step.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.StepStatus","title":"<code>StepStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>A class to represent the status of a step in a workflow.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.Steps","title":"<code>Steps</code>","text":"<p>A class to manage the steps in the workflow.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.Steps.register","title":"<code>register(name)</code>","text":"<p>A method to register a step in the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the step.</p> required <p>Returns:</p> Type Description <code>Callable[[Type[Step]], None]</code> <p>The class wrapper.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.Steps.wrap_step","title":"<code>wrap_step()</code>  <code>staticmethod</code>","text":"<p>A method to wrap the step.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <code>Step</code> <p>The step to wrap.</p> required <p>Returns:</p> Type Description <p>The wrapped step.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.StepsInformation","title":"<code>StepsInformation</code>  <code>dataclass</code>","text":"<p>A class to represent the information of all steps in a workflow.</p> <p>Parameters:</p> Name Type Description Default <code>steps</code> <code>Dict[StepPath, StepInformation]</code> <p>The dictionary of steps in the workflow.</p> <code>dict()</code>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.StepsInformation.first_step","title":"<code>first_step: Optional[StepInformation]</code>  <code>property</code>","text":"<p>A property to get the first step in the workflow.</p> <p>Returns:</p> Type Description <code>Optional[StepInformation]</code> <p>The first step in the workflow.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.StepsInformation.get_step_information","title":"<code>get_step_information(step_path)</code>","text":"<p>A method to get the status of a step in the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>step_path</code> <code>StepPath</code> <p>The path to the step.</p> required <p>Returns:</p> Type Description <code>StepInformation</code> <p>The status of the step.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.StepsInformation.to_dict","title":"<code>to_dict()</code>","text":"<p>A method to convert the steps information to a dictionary.</p> <p>Returns:</p> Type Description <code>Dict</code> <p>The steps information as a dictionary.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.WorkflowContext","title":"<code>WorkflowContext</code>","text":"<p>A class to represent the context of a workflow. Context is a dictionary that stores the state of the workflow that is shared between steps.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>Optional[Dict]</code> <p>The parameters of the workflow.</p> <code>None</code> <code>steps_information</code> <code>Optional[StepsInformation]</code> <p>The status of the steps in the workflow.</p> <code>None</code>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.WorkflowContext.global_lock","title":"<code>global_lock: Lock</code>  <code>property</code>","text":"<p>A property to get the global lock of the workflow.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.WorkflowContext.steps_information","title":"<code>steps_information: StepsInformation</code>  <code>property</code>","text":"<p>A property to get the status of all steps in the workflow.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.WorkflowContext.get","title":"<code>get(key, default=None)</code>","text":"<p>A method to get a value from the context.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the value to get from the context.</p> required <code>default</code> <code>Any</code> <p>The default value to return if the key is not found in the context.</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>Value from the context, if the key is found, otherwise the default value.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.WorkflowContext.get_step_information","title":"<code>get_step_information(step)</code>","text":"<p>A method to get the status of a step in the workflow.</p> <p>Parameters:</p> Name Type Description Default <code>step</code> <code>StepPath</code> <p>The path to the step.</p> required <p>Returns:</p> Type Description <code>StepInformation</code> <p>The status of the step.</p>"},{"location":"developers/modules/workflow/#workflows_manager.workflow.WorkflowContext.set","title":"<code>set(key, value)</code>","text":"<p>A method to set a value to the context.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the value to set in the context.</p> required <code>value</code> <code>Any</code> <p>The value to set in the context.</p> required"},{"location":"setup/cli/","title":"CLI","text":"<pre><code>workflows-manager [OPTIONS...] &lt;action&gt; [ACTION OPTIONS...]\n</code></pre>"},{"location":"setup/cli/#main-parser","title":"Main Parser","text":"Argument Default Required Choices Description <code>action</code> <code>true</code> <code>version</code> | <code>validate</code> | <code>run</code> | <code>list</code> Subcommands for managing workflows."},{"location":"setup/cli/#subparser-action","title":"Subparser: <code>action</code>","text":""},{"location":"setup/cli/#parser-version","title":"Parser: <code>version</code>","text":"<p>This parser returns the version of the application.</p>"},{"location":"setup/cli/#parser-validate","title":"Parser: <code>validate</code>","text":"<p>This parser validates the configuration file.</p> Argument Default Required Choices Description <code>--imports</code> | <code>-i</code> <code>false</code> List of paths to the workflows modules <code>--configuration-file</code> | <code>-c</code> <code>false</code> Path to the configuration file with workflows and steps. If not provided, then it will try to search for <code>workflows.yaml</code> or <code>workflows.json</code> in the current working directory. <code>--disable-error-codes</code> <code>false</code> <code>false</code> Disable error codes for exceptions. It changes behavior of the application to always return 0 as an exit status code. <code>--disable-current-path-import</code> <code>false</code> <code>false</code> Disable automatic import of the modules from the current path. <code>--log-level</code> | <code>-ll</code> <code>info</code> <code>false</code> <code>debug</code> | <code>info</code> | <code>warning</code> | <code>error</code> | <code>critical</code> Logging level of the application. <code>--log-file</code> | <code>-lf</code> <code>false</code> Path to the log file. If not provided, it won't log to a file. <code>--console-log-format</code> | <code>-clf</code> <code>text</code> <code>false</code> <code>text</code> | <code>json</code> Format of the log messages in the console. <code>--file-log-format</code> | <code>-flf</code> <code>text</code> <code>false</code> <code>text</code> | <code>json</code> Format of the log messages in the file. <code>--workflow-name</code> | <code>-w</code> <code>false</code> Name of the workflow to validate. If not provided, it will validate that required parameters have been provided and all necessary steps have been registered. <code>--parameter</code> | <code>-p</code> <code>false</code> Parameter for the workflow. Format: <code>&lt;name&gt;:&lt;type&gt;:&lt;value&gt;</code>.Supported types:<ul><li><code>str</code> - string</li><li><code>int</code> - integer</li><li><code>bool</code> - boolean</li><li><code>float</code> - float</li><li><code>list</code> - list (delimiter: <code>,</code>)</li><li><code>dict</code> - dictionary (JSON format)</li></ul> <code>--string-parameter</code> | <code>-sp</code> <code>false</code> String parameter for the workflow. Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--integer-parameter</code> | <code>-ip</code> <code>false</code> Integer parameter for the workflow. Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--boolean-parameter</code> | <code>-bp</code> <code>false</code> Boolean parameter for the workflow. Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--float-parameter</code> | <code>-fp</code> <code>false</code> Float parameter for the workflow. Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--list-parameter</code> | <code>-lp</code> <code>false</code> List parameter for the workflow (delimiter: <code>,</code>). Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--dict-parameter</code> | <code>-dp</code> <code>false</code> Dictionary parameter for the workflow (JSON format). Format: <code>&lt;name&gt;:&lt;value&gt;</code>."},{"location":"setup/cli/#parser-run","title":"Parser: <code>run</code>","text":"<p>This parser runs the workflow.</p> Argument Default Required Choices Description <code>--imports</code> | <code>-i</code> <code>false</code> List of paths to the workflows modules <code>--configuration-file</code> | <code>-c</code> <code>false</code> Path to the configuration file with workflows and steps. If not provided, then it will try to search for <code>workflows.yaml</code> or <code>workflows.json</code> in the current working directory. <code>--disable-error-codes</code> <code>false</code> <code>false</code> Disable error codes for exceptions. It changes behavior of the application to always return 0 as an exit status code. <code>--disable-current-path-import</code> <code>false</code> <code>false</code> Disable automatic import of the modules from the current path. <code>--log-level</code> | <code>-ll</code> <code>info</code> <code>false</code> <code>debug</code> | <code>info</code> | <code>warning</code> | <code>error</code> | <code>critical</code> Logging level of the application. <code>--log-file</code> | <code>-lf</code> <code>false</code> Path to the log file. If not provided, it won't log to a file. <code>--console-log-format</code> | <code>-clf</code> <code>text</code> <code>false</code> <code>text</code> | <code>json</code> Format of the log messages in the console. <code>--file-log-format</code> | <code>-flf</code> <code>text</code> <code>false</code> <code>text</code> | <code>json</code> Format of the log messages in the file. <code>--status-file</code> | <code>-sf</code> <code>false</code> Path to the file where the statuses of the particular steps will be stored. <code>--parameter</code> | <code>-p</code> <code>false</code> Parameter for the workflow. Format: <code>&lt;name&gt;:&lt;type&gt;:&lt;value&gt;</code>.Supported types:<ul><li><code>str</code> - string</li><li><code>int</code> - integer</li><li><code>bool</code> - boolean</li><li><code>float</code> - float</li><li><code>list</code> - list (delimiter: <code>,</code>)</li><li><code>dict</code> - dictionary (JSON format)</li></ul> <code>--string-parameter</code> | <code>-sp</code> <code>false</code> String parameter for the workflow. Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--integer-parameter</code> | <code>-ip</code> <code>false</code> Integer parameter for the workflow. Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--boolean-parameter</code> | <code>-bp</code> <code>false</code> Boolean parameter for the workflow. Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--float-parameter</code> | <code>-fp</code> <code>false</code> Float parameter for the workflow. Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--list-parameter</code> | <code>-lp</code> <code>false</code> List parameter for the workflow (delimiter: <code>,</code>). Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--dict-parameter</code> | <code>-dp</code> <code>false</code> Dictionary parameter for the workflow (JSON format). Format: <code>&lt;name&gt;:&lt;value&gt;</code>. <code>--workflow-name</code> | <code>-w</code> <code>default</code> <code>false</code> Name of the workflow to run."},{"location":"setup/cli/#parser-list","title":"Parser: <code>list</code>","text":"<p>This parser lists all available workflows.</p> Argument Default Required Choices Description <code>--configuration-file</code> | <code>-c</code> <code>false</code> Path to the configuration file with workflows and steps. If not provided, then it will try to search for <code>workflows.yaml</code> or <code>workflows.json</code> in the current working directory."},{"location":"setup/configure_workflow/","title":"Configure Workflow","text":"<p>Workflows is one of the core components of the workflows manager. It allows you to manage your workflows in a more efficient way. You can create a new workflow by reusing the existing steps or workflows.</p> <p>There are three types of steps that can be used in the workflows' configuration:</p> <ul> <li>normal - A normal step is a step that executes a single task that is defined in the code.</li> <li>parallel - A parallel step is a step that executes multiple steps in parallel.</li> <li>workflow - A workflow step is a step that executes another workflow.</li> </ul> <p>The configuration of the workflows can be done using a <code>*.yaml</code> or <code>*.json</code> file. The file should contain the definition of the workflows and its steps. You can check structure of the configuration file on Developers -&gt; Workflows Syntax page.</p>"},{"location":"setup/configure_workflow/#create-a-new-workflow","title":"Create a new workflow","text":"<p>To create a new workflow you need to create a new yaml file in your project. The file contains the definition of the workflow and its steps.</p> <p>Here is an example of a simple workflow that uses the <code>console-output</code> step:</p> YAMLJSON workflows.yaml<pre><code>workflows:\n  simple-workflow:\n    steps:\n      - name: Say hello\n        step: console-output\n        parameters:\n          - name: message\n            value: \"Hello, world!\"\n</code></pre> workflows.json<pre><code>{\n  \"workflows\": {\n    \"simple-workflow\": {\n      \"steps\": [\n        {\n          \"name\": \"Say hello\",\n          \"step\": \"console-output\",\n          \"parameters\": [\n            {\n              \"name\": \"message\",\n              \"value\": \"Hello, world!\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre> <ul> <li>The <code>workflows</code> key is the root key of the yaml file. All workflows should be defined under this key.</li> <li>The <code>simple-workflow</code> key is the name of the workflow.</li> <li>The <code>steps</code> key contains the list of steps that should be executed in the workflow.</li> <li>The <code>name</code> key is the name of the step, it must be unique within the <code>steps</code>.</li> <li>The <code>step</code> key is the name of the step that should be executed. It shall match the name of the step defined in the   step file.</li> <li>The <code>parameters</code> key contains the list of parameters that should be passed to the step.</li> <li>The <code>name</code> key is the name of the parameter that is expected by the step.</li> <li>The <code>value</code> key is the value of the parameter.</li> </ul>"},{"location":"setup/configure_workflow/#parallel-step","title":"Parallel Step","text":"<p>You can also create a parallel step that executes multiple steps in parallel. To create a parallel workflow you need to define the steps under the <code>parallel</code> key.</p> <p>Here is an example of a parallel workflow that executes two steps in parallel:</p> YAMLJSON workflows.yaml<pre><code>workflows:\n  parallel-workflow:\n    steps:\n      - name: Capture message\n        type: parallel\n        parameters:\n          - name: message\n            value: \"This message will be printed and logged.\"\n        parallels:\n          - name: Print message\n            step: console-output\n          - name: Log message\n            step: log-message\n</code></pre> workflows.json<pre><code>{\n  \"workflows\": {\n    \"parallel-workflow\": {\n      \"steps\": [\n        {\n          \"name\": \"Capture message\",\n          \"type\": \"parallel\",\n          \"parameters\": [\n            {\n              \"name\": \"message\",\n              \"value\": \"This message will be printed and logged.\"\n            }\n          ],\n          \"parallels\": [\n            {\n              \"name\": \"Print message\",\n              \"step\": \"console-output\"\n            },\n            {\n              \"name\": \"Log message\",\n              \"step\": \"log-message\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre> <ul> <li>The <code>type</code> key is used to define the type of the step. The <code>parallel</code> type is used to execute multiple steps in   parallel.</li> <li>The <code>parallels</code> key contains the list of steps that should be executed in parallel.</li> </ul> <p>In this example the <code>Capture message</code> step is a parallel step that print and logs the message in parallel. It has its own set of parameters defined under the <code>parameters</code> key. This will automatically inject the parameters into the steps that are executed in parallel.</p>"},{"location":"setup/configure_workflow/#workflow-step","title":"Workflow Step","text":"<p>You can also create a workflow step that executes another workflow.</p> <p>Here is an example of a workflow <code>embedded-workflow</code> with the step that executes the <code>simple-workflow</code> workflow:</p> YAMLJSON workflows.yaml<pre><code>workflows:\n  simple-workflow:\n    steps:\n      - name: Say hello\n        step: console-output\n  embedded-workflow:\n    steps:\n      - name: Execute simple workflow\n        type: workflow\n        workflow: simple-workflow\n        parameters:\n          - name: message\n            value: \"Hello, world!\"\n</code></pre> workflows.json<pre><code>{\n  \"workflows\": {\n    \"simple-workflow\": {\n      \"steps\": [\n        {\n          \"name\": \"Say hello\",\n          \"step\": \"console-output\"\n        }\n      ]\n    },\n    \"embedded-workflow\": {\n      \"steps\": [\n        {\n          \"name\": \"Execute simple workflow\",\n          \"type\": \"workflow\",\n          \"workflow\": \"simple-workflow\",\n          \"parameters\": [\n            {\n              \"name\": \"message\",\n              \"value\": \"Hello, world!\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre> <ul> <li>The <code>type</code> key is used to define the type of the step. The <code>workflow</code> type is used to execute another workflow.</li> <li>The <code>workflow</code> key is the name of the workflow that should be executed.</li> </ul> <p>In this example the <code>Execute simple workflow</code> step is a workflow step that executes the <code>simple-workflow</code> workflow. It has its own set of parameters defined under the <code>parameters</code> key. This will automatically inject the parameters into the steps that are executed in the workflow.</p>"},{"location":"setup/configure_workflow/#template-data","title":"Template Data","text":"<p>You can also use template data in the workflow configuration. The template data can be used to inject dynamic values into the workflow configuration. Currently, the template data is supported only for the following fields:</p> <ul> <li><code>name</code></li> <li><code>step</code></li> <li><code>workflow</code></li> <li><code>parameters[*].value</code></li> </ul> <p>To inject the template data into the attribute, you need to define a new variable in the <code>parameters</code>. After that you  can use the variable in the attribute by using the <code>{ variable_name }</code> syntax. Any variable of the type other than <code>str</code> will be converted to a string before injecting it into the attribute, except of <code>parameters[*].value</code> that preserves the original type. However, there is one exception: if the template variable is a string that contains additional text, it will be treated as a string and will not be converted.</p> <p>Note: To use <code>{</code> and <code>}</code> characters in the value of the parameter, you need to escape them by using double brackets <code>{{</code> and <code>}}</code>.</p> <p>Example: let's say you have a parameter <code>age</code> with the value <code>18</code> that you want to use in the <code>message</code> variable. You can use the <code>age</code> variable in the <code>message</code> in the following way: <code>\"Age, { age }\"</code>, that will cause that value assigned to message will be of <code>str</code> type, but if you use <code>\"{ age }\"</code> as a value for <code>message</code> variable, it will be converted to <code>str</code>.</p> <p>Here is an example of a workflow that uses the template data:</p> YAMLJSON workflows.yaml<pre><code>parameters:\n  - name: name\n    value: \"John Doe\"\nworkflows:\n  template-workflow:\n    steps:\n      - name: Say hello\n        step: console-output\n        parameters:\n          - name: message\n            value: \"Hello, { name }!\"\n</code></pre> workflows.json<pre><code>{\n  \"parameters\": [\n    {\n      \"name\": \"name\",\n      \"value\": \"John Doe\"\n    }\n  ],\n  \"workflows\": {\n    \"template-workflow\": {\n      \"steps\": [\n        {\n          \"name\": \"Say hello\",\n          \"step\": \"console-output\",\n          \"parameters\": [\n            {\n              \"name\": \"message\",\n              \"value\": \"Hello, { name }!\"\n            }\n          ]\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"setup/docker/","title":"Docker Image","text":"<p>The workflows-manager provides a Docker image that can be used to run the workflows in a Docker container. The image is based on the <code>python:3.9-alpine</code> image and contains the workflows-manager package and its dependencies.</p> <p>To use the Docker image, you need to have Docker installed on your machine. You can install Docker by following the instructions on the official Docker website.</p> <p>To run the workflows in a Docker container, you need to mount the directory containing the workflows to the container. By default, the container will look for the steps and workflows in the <code>/app</code> directory.</p> <p>Example</p> latestspecific version <pre><code>docker run --rm -v &lt;path to the workflow and steps on local machine&gt;:/app dl1998/workflows-manager:latest run\n</code></pre> <pre><code>docker run --rm -v &lt;path to the workflow and steps on local machine&gt;:/app dl1998/workflows-manager:0.4.0 run\n</code></pre> <p>Replace <code>&lt;path to the workflow and steps on local machine&gt;</code> with the path to the directory containing the workflows and steps on your local machine.</p> <p>If you have your own Python dependencies that you want to use in the workflows, you can create a custom Docker image based on the workflows-manager image. You can create a <code>Dockerfile</code> in the same directory as your workflows and steps with the following content:</p> latestspecific version <pre><code>FROM dl1998/workflows-manager:latest\n\n# Install additional Python dependencies\nCOPY requirements.txt /app\n\nRUN pip install -r requirements.txt\n</code></pre> <pre><code>FROM dl1998/workflows-manager:0.4.0\n\n# Install additional Python dependencies\nCOPY requirements.txt /app\n\nRUN pip install -r requirements.txt\n</code></pre> <p>You can then build the custom Docker image using the following command, you need to run it in the same directory as the <code>Dockerfile</code>:</p> <pre><code>docker build -t &lt;new-workflows-manager-image&gt; .\n</code></pre> <p>Replace <code>&lt;new-workflows-manager-image&gt;</code> with the name you want to give to the new Docker image. You can then use this image to run the workflows in a Docker container.</p>"},{"location":"setup/write_a_step/","title":"Write a Step","text":"<p>One of the main features of the workflows-manager is the ability to create new workflows by reusing the existing steps. To create a new step you need to create a new Python file in your project. The file should contain a class that inherits from the <code>Step</code> class.</p> <p>The <code>Step</code> class is a base class for all steps. It provides a simple interface to define the step behavior. The class contains two methods: <code>perform</code> and <code>configure_logger</code>. The <code>perform</code> method is the main method that should contain the step logic, it must be implemented in the child class. The <code>configure_logger</code> method is used to configure the logger for the step.</p> <p>You will need the following imports to create a new step:</p> <pre><code>from workflows_manager.workflow import steps, Step\n</code></pre> <p>Here is an example of a simple step that prints a message to the console:</p> <pre><code>steps.register(name=\"console-output\") # (1)\nclass ConsoleOutput(Step): # (2)\n    def perform(self, message: str): # (3)\n        print(message) # (4)\n</code></pre> <ol> <li>Register the step with the name <code>console-output</code>.</li> <li>Create a new class <code>ConsoleOutput</code> that inherits from the <code>Step</code> class.</li> <li>Implement the <code>perform</code> method that receives a string with message and    then prints it to the console.</li> <li>Print the message to the console.</li> </ol>"},{"location":"setup/write_a_step/#configure-the-logger-for-the-step","title":"Configure the logger for the step","text":"<p>The <code>configure_logger</code> method is used to configure the logger for the step. By default, the step is configured to use the parent logger from the workflows-manager. You can override this method to configure the logger for the step.</p> <p>Here is an example of a step that configures the logger to print the message to the console:</p> <pre><code>steps.register(name=\"log-message\")\nclass LogMessage(Step):\n    def configure_logger(self):\n        self.logger = logging.getLogger(\"log-message\") # (1)\n        self.logger.setLevel(logging.INFO)\n\n        formatter = logging.Formatter('[%(levelname)s] %(message)s')\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(formatter)\n        self.logger.addHandler(console_handler)\n\n    def perform(self, message: str):\n        self.logger.info(message) # (2)\n</code></pre> <ol> <li>Create a new logger with the name <code>log-message</code> and configure it.</li> <li>Use the logger to print the message to the console.</li> </ol>"},{"location":"tutorials/json_cleaning_workflow/","title":"Tutorial: Creating and Running a JSON Cleaning Workflow","text":""},{"location":"tutorials/json_cleaning_workflow/#objective","title":"Objective","text":"<p>This workflow will read a JSON file, remove any fields with <code>null</code> values, and save the cleaned JSON data to a new file.</p>"},{"location":"tutorials/json_cleaning_workflow/#step-1-create-the-python-steps","title":"Step 1: Create the Python Steps","text":"<ol> <li> <p>Create a Python file to define the steps. In this example, we'll name it <code>steps.py</code>.</p> </li> <li> <p>Add the necessary imports:</p> <pre><code>import json\nfrom workflows_manager.workflow import steps, Step\n</code></pre> <ul> <li><code>steps</code> is a decorator to register the step classes.</li> <li><code>Step</code> is the base class for all steps.</li> </ul> </li> <li> <p>Implement the <code>LoadJSONStep</code> to load the JSON file and store it in the workflow context.</p> <pre><code>@steps.register(name='load-json')\nclass LoadJSONStep(Step):\n    \"\"\"\n    Step that loads JSON data from a file and stores it in the context.\n    \"\"\"\n\n    def perform(self, input_json: str) -&gt; None:\n        with open(input_json, 'r') as infile:\n            data = json.load(infile)\n\n        self.workflow_context.set(\"json_data\", data)\n        self.logger.info(f'JSON data loaded from {input_json}')\n</code></pre> </li> <li> <p>Implement the <code>RemoveNullsStep</code> to recursively remove <code>null</code> fields from the JSON data stored in the context.</p> <pre><code>@steps.register(name='remove-nulls')\nclass RemoveNullsStep(Step):\n    \"\"\"\n    Step that removes all fields with null values from JSON data in the context.\n    \"\"\"\n    def remove_nulls(self, data):\n        if isinstance(data, dict):\n            return {key: self.remove_nulls(value) for key, value in data.items() if value is not None}\n        elif isinstance(data, list):\n            return [self.remove_nulls(item) for item in data]\n        else:\n            return data\n\n    def perform(self) -&gt; None:\n        data = self.workflow_context.get(\"json_data\")\n        cleaned_data = self.remove_nulls(data)\n        self.workflow_context.set(\"cleaned_json_data\", cleaned_data)\n        self.logger.info('Null fields removed from JSON data')\n</code></pre> </li> <li> <p>Implement the <code>SaveJSONStep</code> to save the cleaned JSON data back to a file.</p> <pre><code>@steps.register(name='save-json')\nclass SaveJSONStep(Step):\n    \"\"\"\n    Step that saves JSON data from the context to a file.\n    \"\"\"\n\n    def perform(self, output_json: str) -&gt; None:\n        data = self.workflow_context.get(\"cleaned_json_data\")\n\n        with open(output_json, 'w') as outfile:\n            json.dump(data, outfile, indent=4)\n\n        self.logger.info(f'Cleaned JSON data saved to {output_json}')\n</code></pre> </li> <li> <p>Save <code>steps.py</code> in a known location.</p> </li> </ol>"},{"location":"tutorials/json_cleaning_workflow/#step-2-create-the-workflow-configuration-file","title":"Step 2: Create the Workflow Configuration File","text":"<ol> <li> <p>Create a YAML or JSON file to configure the workflow. Name this file <code>workflows.yaml</code> or <code>workflows.json</code>.</p> </li> <li> <p>Define the Parameters:</p> <ul> <li><code>input_json</code>: Path to the input JSON file.</li> <li><code>output_json</code>: Path where the cleaned JSON will be saved.</li> </ul> </li> <li> <p>Define the Workflow to include each step in the correct sequence.</p> YAMLJSON workflows.yaml<pre><code>parameters:\n  - name: input_json\n    value: '&lt;project_path&gt;/data/input.json'\n  - name: output_json\n    value: '&lt;project_path&gt;/data/output.json'\n\nworkflows:\n  clean-json:\n    steps:\n      - name: Load JSON\n        step: load-json\n      - name: Remove null values\n        step: remove-nulls\n      - name: Save JSON\n        step: save-json\n</code></pre> workflows.json<pre><code>{\n  \"parameters\": [\n    {\n      \"name\": \"input_json\",\n      \"value\": \"&lt;project_path&gt;/data/input.json\"\n    },\n    {\n      \"name\": \"output_json\",\n      \"value\": \"&lt;project_path&gt;/data/output.json\"\n    }\n  ],\n  \"workflows\": {\n    \"clean-json\": {\n      \"steps\": [\n        {\n          \"name\": \"Load JSON\",\n          \"step\": \"load-json\"\n        },\n        {\n          \"name\": \"Remove null values\",\n          \"step\": \"remove-nulls\"\n        },\n        {\n          \"name\": \"Save JSON\",\n          \"step\": \"save-json\"\n        }\n      ]\n    }\n  }\n}\n</code></pre> <p>Replace <code>&lt;project_path&gt;</code> with the actual path to your project directory.</p> </li> <li> <p>Save <code>workflows.yaml</code> or <code>workflows.json</code> in the same directory as <code>steps.py</code> or a known path.</p> </li> </ol>"},{"location":"tutorials/json_cleaning_workflow/#step-3-prepare-a-sample-json-file","title":"Step 3: Prepare a Sample JSON File","text":"<p>Create a sample JSON file with some fields set to <code>null</code>. Save it as <code>input.json</code> in the specified location (<code>&lt;project_path&gt;/data/input.json</code>).</p> <p>Example <code>input.json</code> content:</p> <pre><code>{\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"address\": {\n        \"street\": \"123 Main St\",\n        \"city\": null,\n        \"state\": \"CA\",\n        \"postal_code\": null\n    },\n    \"contacts\": [\n        {\"type\": \"email\", \"value\": \"alice@example.com\"},\n        {\"type\": \"phone\", \"value\": null}\n    ],\n    \"preferences\": {\n        \"newsletter\": true,\n        \"sms_alerts\": null\n    },\n    \"membership\": null\n}\n</code></pre>"},{"location":"tutorials/json_cleaning_workflow/#step-4-run-the-workflow","title":"Step 4: Run the Workflow","text":"<ol> <li> <p>Open a terminal and navigate to the directory where you saved <code>steps.py</code>, and <code>workflows.yaml</code> or <code>workflows.json</code>.</p> </li> <li> <p>Run the Workflow with <code>workflows-manager</code>, specifying the imports and configuration file paths:</p> YAMLJSON <pre><code>workflows-manager run -i &lt;project_path&gt;/steps.py -c &lt;project_path&gt;/workflows.yaml -w clean-json\n</code></pre> <pre><code>workflows-manager run -i &lt;project_path&gt;/steps.py -c &lt;project_path&gt;/workflows.json -w clean-json\n</code></pre> <ul> <li>If you'd like more detailed logging output, add <code>--log-level debug</code>.</li> <li>If you want to save logs to a file, use <code>--log-file /path/to/logfile.log</code>.</li> </ul> <p>Override parameters from the command line</p> <p>You can override the parameters defined in the configuration file by adding them to the command line. For example:</p> YAMLJSON <pre><code>workflows-manager run -i &lt;project_path&gt;/steps.py -c &lt;project_path&gt;/workflows.yaml -sp \"input_json:&lt;new_path&gt;/input.json\" -w clean-json\n</code></pre> <pre><code>workflows-manager run -i &lt;project_path&gt;/steps.py -c &lt;project_path&gt;/workflows.json -sp \"input_json:&lt;new_path&gt;/input.json\" -w clean-json\n</code></pre> </li> <li> <p>Verify Output:</p> <ul> <li>After the workflow completes, check <code>&lt;project_path&gt;/data/output.json</code>.</li> <li>The cleaned JSON file should have all <code>null</code> fields removed.</li> </ul> </li> </ol>"},{"location":"tutorials/json_cleaning_workflow/#summary","title":"Summary","text":"<p>You\u2019ve now created a simple JSON cleaning workflow using <code>workflows-manager</code>! Here\u2019s a recap of the steps:</p> <ol> <li>Define Python steps for loading, cleaning, and saving JSON.</li> <li>Configure the workflow in either <code>workflows.yaml</code> or <code>workflows.json</code> file.</li> <li>Prepare an input JSON file with <code>null</code> fields.</li> <li>Run the workflow from the command line to generate the cleaned JSON file.</li> </ol> <p>This setup is easily extensible for more complex data processing workflows.</p>"}]}